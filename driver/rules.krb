# rules.krb

saw_top_cw
    foreach
        layout.direction(cw)
        history.quadrant($n, top_left)
        history.quadrant($m, top_right)
        check $n < $m
    assert
        history.saw_quadrant(top)

saw_bottom_cw
    foreach
        layout.direction(cw)
        history.quadrant($n, bottom_right)
        history.quadrant($m, bottom_left)
        check $n < $m
    assert
        history.saw_quadrant(bottom)

saw_left_cw
    foreach
        layout.direction(cw)
        history.quadrant($n, bottom_left)
        history.quadrant($m, top_left)
        check $n < $m
    assert
        history.saw_quadrant(left)

saw_right_cw
    foreach
        layout.direction(cw)
        history.quadrant($n, top_right)
        history.quadrant($m, bottom_right)
        check $n < $m
    assert
        history.saw_quadrant(right)

saw_top_ccw
    foreach
        layout.direction(ccw)
        history.quadrant($n, top_right)
        history.quadrant($m, top_left)
        check $n < $m
    assert
        history.saw_quadrant(top)

saw_bottom_ccw
    foreach
        layout.direction(ccw)
        history.quadrant($n, bottom_left)
        history.quadrant($m, bottom_right)
        check $n < $m
    assert
        history.saw_quadrant(bottom)

saw_left_ccw
    foreach
        layout.direction(ccw)
        history.quadrant($n, top_left)
        history.quadrant($m, bottom_left)
        check $n < $m
    assert
        history.saw_quadrant(left)

saw_right_ccw
    foreach
        layout.direction(ccw)
        history.quadrant($n, bottom_right)
        history.quadrant($m, top_right)
        check $n < $m
    assert
        history.saw_quadrant(right)

done
    use get_plan($step, True)
    when
        history.saw_quadrant(left)
        history.saw_quadrant(right)
        history.saw_quadrant(top)
        history.saw_quadrant(bottom)
        special.claim_goal()

not_done
    use get_plan($step, False)
    when
        !car_quadrant($step, $quadrant)
        python
            print "adding quadrant", $quadrant
            engine.add_universal_fact('history', 'quadrant', ($step, $quadrant))
        !layout.direction($direction)
        !get_plan2($step, $direction, $quadrant)
            $$()

up_left1
    use get_plan2($step, cw, left)
    when
        !go_to_top($step)
            $$()

up_left2
    use get_plan2($step, cw, bottom_left)
    when
        !go_to_top($step)
            $$()

up_right1
    use get_plan2($step, ccw, right)
    when
        !go_to_top($step)
            $$()

up_right2
    use get_plan2($step, ccw, bottom_right)
    when
        !go_to_top($step)
            $$()

down_left1
    use get_plan2($step, ccw, left)
    when
        !go_to_bottom($step)
            $$()

down_left2
    use get_plan2($step, ccw, top_left)
    when
        !go_to_bottom($step)
            $$()

down_right1
    use get_plan2($step, cw, right)
    when
        !go_to_bottom($step)
            $$()

down_right2
    use get_plan2($step, cw, top_right)
    when
        !go_to_bottom($step)
            $$()

left_top1
    use get_plan2($step, ccw, top)
    when
        !go_to_left($step)
            $$()

left_top2
    use get_plan2($step, ccw, top_right)
    when
        !go_to_left($step)
            $$()

left_bottom1
    use get_plan2($step, cw, bottom)
    when
        !go_to_left($step)
            $$()

left_bottom2
    use get_plan2($step, cw, bottom_right)
    when
        !go_to_left($step)
            $$()

right_top1
    use get_plan2($step, cw, top)
    when
        !go_to_right($step)
            $$()

right_top2
    use get_plan2($step, cw, top_left)
    when
        !go_to_right($step)
            $$()

right_bottom1
    use get_plan2($step, ccw, bottom)
    when
        !go_to_right($step)
            $$()

right_bottom2
    use get_plan2($step, ccw, bottom_left)
    when
        !go_to_right($step)
            $$()

car_on_top
    use car_quadrant($step, top)
    when
        !layout.track($left, $top, $right, $bottom)
        !layout.building($b_left, $b_top, $b_right, $b_bottom)
        !history.position($step, $x, $y)
        check $x - $left > 1
        check $right - $x > 1
        check $b_top - $y > 1

car_on_bottom
    use car_quadrant($step, bottom)
    when
        !layout.track($left, $top, $right, $bottom)
        !layout.building($b_left, $b_top, $b_right, $b_bottom)
        !history.position($step, $x, $y)
        check $x - $left > 1
        check $right - $x > 1
        check $y - $b_bottom > 1

car_on_left
    use car_quadrant($step, left)
    when
        !layout.track($left, $top, $right, $bottom)
        !layout.building($b_left, $b_top, $b_right, $b_bottom)
        !history.position($step, $x, $y)
        check $y - $top > 1
        check $bottom - $y > 1
        check $b_left - $x > 1

car_on_right
    use car_quadrant($step, right)
    when
        !layout.track($left, $top, $right, $bottom)
        !layout.building($b_left, $b_top, $b_right, $b_bottom)
        !history.position($step, $x, $y)
        check $y - $top > 1
        check $bottom - $y > 1
        check $x - $b_right > 1

car_on_top_left
    use car_quadrant($step, top_left)
    when
        !layout.track($left, $top, $right, $bottom)
        !history.position($step, $x, $y)
        check $left - $x > -1
        check $top - $y > -1

car_on_top_right
    use car_quadrant($step, top_right)
    when
        !layout.track($left, $top, $right, $bottom)
        !history.position($step, $x, $y)
        check $x - $right > -1
        check $top - $y > -1

car_on_bottom_left
    use car_quadrant($step, bottom_left)
    when
        !layout.track($left, $top, $right, $bottom)
        !history.position($step, $x, $y)
        check $left - $x > -1
        check $y - $bottom > -1

car_on_bottom_right
    use car_quadrant($step, bottom_right)
    when
        !layout.track($left, $top, $right, $bottom)
        !history.position($step, $x, $y)
        check $x - $right > -1
        check $y - $bottom > -1

go_to_top
    use go_to_top($step)
    when
        python print "go_to_top"
        !layout.track($left, $top, $right, $bottom)
        !point_car($step, 0) as $turn_car
        !go($turn_car, 1, $top, False)
            $$()

go_to_bottom
    use go_to_bottom($step)
    when
        python print "go_to_bottom"
        !layout.track($left, $top, $right, $bottom)
        !point_car($step, 180) as $turn_car
        !go($turn_car, 1, $bottom, True)
            $$()

go_to_left
    use go_to_left($step)
    when
        python print "go_to_left"
        !layout.track($left, $top, $right, $bottom)
        !point_car($step, 270) as $turn_car
        !go($turn_car, 0, $left, False)
            $$()

go_to_right
    use go_to_right($step)
    when
        python print "go_to_right"
        !layout.track($left, $top, $right, $bottom)
        !point_car($step, 90) as $turn_car
        !go($turn_car, 0, $right, True)
            $$()

point_car
    use point_car($step, $heading)
    when
        !history.heading($step, $h)
        $turn_angle = ($heading - $h) % 360
        python print "point_car step", $step, "want", $heading, "at", $h, "turn_angle", $turn_angle
        !turn($step, $turn_angle)
            return $$()

turn_nada
    use turn($step, $turn_angle)
    when
        check $turn_angle < 1.4 or $turn_angle > 360 - 1.4
        special.claim_goal()
    with
        print "turn_nada"
        return driver.Robot.position

turn_left
    use turn($step, $turn_angle)
    when
        check $turn_angle >= 180
    with
        angle = 360 - $turn_angle
        print "turn_left", angle
        driver.Robot.set_steering(-angle)
        if driver.Robot.forward(10) != 10:
            raise PlanFailed
        return driver.Robot.position

turn_right
    use turn($step, $turn_angle)
    when
        check $turn_angle <= 180
    with
        print "turn_right", $turn_angle
        driver.Robot.set_steering($turn_angle)
        if driver.Robot.forward(10) != 10:
            raise PlanFailed
        return driver.Robot.position

go
    use go($turn_car, $index, $destination, $dest_larger)
    with
        print "go"
        try:
            pos = $turn_car()
            if $dest_larger:
                distance = $destination - pos[$index]
            else:
                distance = pos[$index] - $destination
            if distance > 0:
                driver.Robot.set_rf(0)
                driver.Robot.set_steering(0)
                driver.Robot.forward(distance)
        except PlanFailed:
            print "PlanFailed"


bc_extras
    import sys
    import driver

plan_extras
    import driver

    class PlanFailed(Exception): pass
