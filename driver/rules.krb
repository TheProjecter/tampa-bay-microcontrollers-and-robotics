# rules.krb

closest_waypoint_by_direction
    # Go to the closest unvisited waypoint in the direction of travel.
    use get_plan($step, $plan)
    when
        get_closest($step, get_waypoint_by_direction, $plan)
        special.claim_goal()

closest_waypoint
    # Wrap up any loose ends by ignoring the direction of travel, and just
    # going to the closest unvisited waypoint.
    use get_plan($step, $plan)
    when
        get_closest($step, get_waypoint, $plan)
        special.claim_goal()

done
    # Can only get here is there are no unvisited waypoints left!
    use get_plan($step, None)

get_closest
    use get_closest($step, $generator, $plan)
    when
        python
            shortest_dist = 1000000000
            plan = None
        forall
            $generator($step, $x, $y, $distance, $heading, $tentative_plan)
            python
                print "waypoint", ($x, $y), "$heading", $heading, \
                      "$distance", $distance
                if $distance < shortest_dist:
                    shortest_dist = $distance
                    plan = $tentative_plan
        check plan is not None
        $plan = plan

get_waypoint
    use get_waypoint($step, $x, $y, $distance, $heading, $plan)
    when
        layout.waypoint($x, $y)
        notany
            waypoint_already_visited($step, $x, $y)
        get_dist_and_heading($step, $x, $y, $distance, $heading)
        goto($step, $distance, $heading, $plan)

get_waypoint_by_direction
    use get_waypoint_by_direction($step, $x, $y, $distance, $heading, $plan)
    when
        get_waypoint($step, $x, $y, $distance, $heading, $plan)
        check_direction($step, $heading)

first_pos_already_visited
    use waypoint_already_visited($step, $x, $y)
    when
        history.position(0, $x, $y)
        special.claim_goal()
        history.position($step, $hx, $hy)
        check $step > 4
        $distance = driver.distance(($hx, $hy), ($x, $y))
        check $distance < 5

waypoint_already_visited
    use waypoint_already_visited($step, $x, $y)
    when
        history.position($_, $hx, $hy)
        $distance = driver.distance(($hx, $hy), ($x, $y))
        check $distance < 5

get_dist_and_heading
    use get_dist_and_heading($step, $x, $y, $distance, $heading)
    when
        !history.position($step, $px, $py)
        $distance = driver.distance(($px, $py), ($x, $y))
        $heading = driver.heading(($px, $py), ($x, $y))

check_direction
    use check_direction($step, $heading)
    when
        !layout.direction($dir)
        check driver.direction($heading) == $dir

goto
    use goto($step, $distance, $heading, $plan)
    when
        !history.heading($step, $h)
        $turn_angle = ($heading - $h) % 360
        make_plan($step, $turn_angle, $distance) as $plan

goto_direct
    use make_plan($step, $turn_angle, $distance)
    when
        check $turn_angle <= 1 or $turn_angle >= 359
        special.claim_goal()
    with
        print "forward", $distance
        driver.Robot.set_steering(0)
        driver.Robot.set_rf(0)
        driver.Robot.forward($distance)

big_turn
    use make_plan($step, $turn_angle, $_distance)
    when
        check 45 <= $turn_angle <= 315
        special.claim_goal()
    with
        print "big_turn", $turn_angle
        driver.Robot.set_rf(0)
        if $turn_angle > 180:
            driver.Robot.set_steering(-45)
            distance = (360 - $turn_angle) / 4.5
        else:
            driver.Robot.set_steering(45)
            distance = $turn_angle / 4.5
        driver.Robot.forward(distance)

little_turn
    use make_plan($step, $turn_angle, $_distance)
    with
        print "little_turn", $turn_angle
        driver.Robot.set_rf(0)
        if $turn_angle > 180:
            driver.Robot.set_steering(-10)
            distance = 360 - $turn_angle
        else:
            driver.Robot.set_steering(10)
            distance = $turn_angle
        driver.Robot.forward(distance)

bc_extras
    import driver

plan_extras
    import driver

